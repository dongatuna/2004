
<section class="bg-white p-5 mt-5">
    <div class="container-fluid">         
        <div class="row justify-content-center mt-4">
            <div class="col-sm-12">                 
                <!-- <h4 class="text-dark text-center"> {{course}} </h4> -->
                <br>                    
                <!--BEGINNING OF THE FORM-->
                <form ref="form" post="/courses/" >
                        
                    <div class="row  justify-content-center">
                        <div class="col-sm-12 col-md-8 col-lg-4">                                
                            <p class="text-dark text-left">
                                Since our classes fill up fast, registration fees payment is required to secure your spot in <span><u><strong>{{course}}</strong></u> </span> class.  Class spots are awarded in order of registration fee payment. 
                            </p>
                        </div>                            
                    </div>   

                        <!--FIRST AND LAST NAMES-->
                    <div class="row justify-content-center">
                        <div class="col-sm-12 col-md-8 col-lg-4">                                
                            <div class="form-group">
                                                                    
                                <p >  FULL NAME: <br><strong> {{getCourse.student.name}} </strong> </p>                                   
                            </div>
                        </div>
                        
                    </div>                     
                                            
                        <!--EMAIL AND TELEPHONE-->
                    <div class="row justify-content-center">
                        <div class="col-sm-12 col-md-4 col-lg-2">
                            <div class="form-group">                                                                       
                                <p > EMAIL: <br> <strong> {{getCourse.student.email}}  </strong></p>                                                                       
                            </div>
                        </div>
                        <div class="col-sm-12 col-md-4 col-lg-2">
                            <div class="form-group">                                                                     
                                <p> TEL: <br> <strong> {{getCourse.student.tel}}  </strong></p>                                                                    
                            </div>
                        </div>
                    </div> 
                    <div class="row justify-content-center">
                        <div class="col-sm-12 col-md-8 col-lg-4 p-3 bg-light">     
                            <p class="text-center lead text-danger"><strong>Register now and secure your spot immediately. </strong></p>
                            <label for="card-element">
                                Credit or debit card
                            </label>
                            <div id="card-element" ref="card-element" @change="cardErrors(event)">
                            <!-- A Stripe Element will be inserted here. -->
                            </div>

                            <!-- Used to display form errors. -->
                            <div id="card-errors" ref="card-errors" role="alert"></div>
                            <!-- <div ref="card" class="credit-card-inputs mb-2"  ></div>                -->
                            <button class="btn btn-primary btn-block p-3 mt-3" type="submit" v-on:click.prevent="register"><strong>Pay $ {{ registration }}.00 to register</strong> </button> 
                                <p class="text-success"><small>Payments processed by Stripe Corporation.</small></p>
                        </div>
                    </div>                                     
                </form>
            </div>                
        </div>
    </div>
</section>


<script src="https://js.stripe.com/v3/"></script>

<script>
import Keys from '../../helpers/courses'    
import { store } from "../../store/store"
import { mapGetters } from "vuex"
import moment from 'moment'

    let stripe = Stripe(`${Keys.stripeKeys.publishable_key}`),
    //let stripe = Stripe("pk_test_1OEs7O89DnSOhIn7wcGJaAaR00e3wrtQKB"),
        elements = stripe.elements()
        //card = undefined 

    let style = {
        base: {
            color: '#32325d',
            fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
            fontSmoothing: 'antialiased',
            fontSize: '16px',
            '::placeholder': {
            color: '#aab7c4'
            }
        },
        
        invalid: {
            color: '#fa755a',
            iconColor: '#fa755a'
        }
    }

    // Create an instance of the card Element.
    let card = elements.create('card', { style })
    
export default {
     //el: '#card-element',

     computed: {
        ...mapGetters([        
            "getCourse"
        ])          
    },      
    
    data(){
        return{           
            course: "",
            course_name: "",          
            registration: 0            
        }
    },
   
    created(){ 
        if(this.getCourse.course.end_date){
            this.course_name = this.getCourse.course.name
            //this.course_type = course.type
            this.course = moment.utc(this.getCourse.course.start_date).format("MMM D") + " - " + moment.utc(this.getCourse.course.end_date).format("MMM D") +" "+ this.getCourse.course.name +" "+ this.getCourse.course.type.toLowerCase()
            this.registration = Keys.Costs[this.getCourse.course.name]
            
        }else{     
            this.course_name = this.getCourse.course.name   
            //this.course_type = course.type           
            this.course = moment.utc(this.getCourse.course.start_date).format("MMM D") +" "+ this.getCourse.course.name +" "+ this.getCourse.course.type.toLowerCase()
            this.registration = Keys.Costs[this.getCourse.course.name]            
        }
    },

    mounted(){

          //this route get a specific/one course and student details using one call!
        this.$store.dispatch('getPublicCourse', { courseId: this.$route.params.course_id, studentId: this.$route.params.student_id })  
        
        card.mount('#card-element')  

    },
    
    methods: {

        cardErrors(e){

            let cardErrors = this.$refs['card-errors']

            if (e.error) {
                cardErrors.textContent = e.error.message
            } else {
                cardErrors.textContent = ''
            }
        },
            

        async register(){
           
           // if(this.checkForm()){

            const { token, error } = await stripe.createToken(card)                      
                                        
            let self = this

            if (error) {
                self.hasCardErrors = true
                self.$forceUpdate() // Forcing the DOM to update so the Stripe Element can update.
                return
            }
            //if the token exists
            if(token && this.registration > 0){   

                const payload = { 
                                  stripeToken : token.id,
                                  amount : this.registration, 
                                  user_course : this.course, 
                                  course_id : this.$route.params.course_id,
                                  student_id: this.$route.params.student_id
                                }                               

                //send this even to GA                   
                this.$ga.event({
                    eventCategory: 'Engagement',
                    eventAction: `Post Registration Payment`,
                    eventLabel: `Prospective Student`,
                    eventValue: 1
                })  
                //create transaction object to send later to Google Analytics
                this.$ga.ecommerce.addTransaction({
                    id: this.$route.params.course_id                    
                })                 
                    
                //add item to virtual cart                 
                this.$ga.ecommerce.addItem({
                    id: this.$route.params.course_id,
                    name: this.course,
                    category: this.course_name,
                    price: this.registration,
                    quantity:  1                   
                })
                //send the data to store
                this.$store.dispatch('postRegistrationPayment', payload)             
                //send ecommerce data to GA
                this.$ga.ecommerce.send()

                //send payer to payment confirmation page
                this.$router.push({name: 'payment-confirmation'})  
            } else {
                alert("There was an error with processing your payment.")
            }                   
          //  }              
        }
    }  
}
</script>

<style scoped>
   
    .StripeElement {
    box-sizing: border-box;

    height: 40px;

    padding: 10px 12px;

    /* border: 1px solid transparent; */
    border: 2px solid green;
    border-radius: 4px;
    background-color: white;

    box-shadow: 0 1px 3px 0 #e6ebf1;
    -webkit-transition: box-shadow 150ms ease;
    transition: box-shadow 150ms ease;
    }

    .StripeElement--focus {
    box-shadow: 0 1px 3px 0 #cfd7df;
    }

    .StripeElement--invalid {
    border-color: #fa755a;
    }

    .StripeElement--webkit-autofill {
    background-color: #fefde5 !important;
    }

</style>